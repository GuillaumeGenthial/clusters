par.cxy = (4,1)
par.cxy = (4)
par.cxy = 10
plot(Mitchell$Month, Mitchell$Temp, xlab="Months after January 1976", ylab="Average soil temperature", asp=4)
plot(Mitchell$Month, Mitchell$Temp, xlab="Months after January 1976", ylab="Average soil temperature", asp=1)
plot(Mitchell$Month, Mitchell$Temp, xlab="Months after January 1976", ylab="Average soil temperature", asp=0.5)
data(water)
pairs(water)
plot(water)
?plot
plot(Mitchell$Month, Mitchell$Temp, xlab="Months after January 1976", ylab="Average soil temperature", asp=1)
?plot
plot.window(xlim=c(0,200), ylim=(-5,25), asp=1)
plot.window(xlim=c(0,200), ylim=c(-5,25), asp=1)
plot(Mitchell$Month, Mitchell$Temp, xlab="Months after January 1976", ylab="Average soil temperature")
plot.window(xlim=c(0,200), ylim=c(-5,25), asp=0.5)
plot(Mitchell$Month, Mitchell$Temp, xlab="Months after January 1976", ylab="Average soil temperature")
plot.window(xlim=c(0,200), ylim=c(-5,25), asp=4)
plot(Mitchell$Month, Mitchell$Temp, xlab="Months after January 1976", ylab="Average soil temperature")
plot.window(xlim=c(0,200), ylim=c(-5,25), asp=0.1)
plot(Mitchell$Month, Mitchell$Temp, xlab="Months after January 1976", ylab="Average soil temperature")
?plot
?par
?lines
S <- matrix(c(4, 1, 3, 1, 2, 3, 3, 3, 9), nrow=3, ncol=3)
# transpose the matrix
S <- t(S)
mean <- c(1, 2, 3)
sigma <- S
nsamples <- 10000
xyz <- rmvnorm(nsamples, mean, sigma)
rxyz <- xyz[abs(xyz[,3]-2) + abs(xyz[,1]-3) < 0.1 ,]
mean(rxyz[,2])
cov(rxyz)[2,2]
nsamples <- 10000
xyz <- rmvnorm(nsamples, mean, sigma)
rxyz <- xyz[abs(xyz[,3]-2) + abs(xyz[,1]-3) < 0.1 ,]
mean(rxyz[,2])
cov(rxyz)[2,2]
nsamples <- 10000
xyz <- rmvnorm(nsamples, mean, sigma)
rxyz <- xyz[abs(xyz[,3]-2) + abs(xyz[,1]-3) < 0.1 ,]
mean(rxyz[,2])
cov(rxyz)[2,2]
library(mvtnorm)
nsamples <- 10000
xyz <- rmvnorm(nsamples, mean, sigma)
rxyz <- xyz[abs(xyz[,3]-2) + abs(xyz[,1]-3) < 0.1 ,]
mean(rxyz[,2])
cov(rxyz)[2,2]
nsamples <- 1000000
xyz <- rmvnorm(nsamples, mean, sigma)
rxyz <- xyz[abs(xyz[,3]-2) + abs(xyz[,1]-3) < 0.1 ,]
mean(rxyz[,2])
cov(rxyz)[2,2]
# 1. Power
# let's define variables
n <- 30
alpha <- .05
# let's define our function
power <- function(delta){
qf = qf(1-alpha, df1=1, df2=n-1)
}
power <- Vectorize(power)
plot(power, 1, 10)
# 1. Power
# let's define variables
n <- 30
alpha <- .05
# let's define our function
power <- function(delta){
qf = qf(1-alpha, df1=1, df2=n-1)
}
power <- Vectorize(power)
plot(power, 1, 10)
power(1)
power(2)
# 1. Power
# let's define variables
n <- 30
alpha <- .05
# let's define our function
power <- function(delta){
quant = qf(1-alpha, df1=1, df2=n-1)
size_effect <- n * delta^2
}
power <- Vectorize(power)
plot(power, 1, 10)
2^2
# 1. Power
# let's define variables
n <- 30
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - qf(p, df1=1, df2=n-1, ncp=n * delta^2)
return power
}
power <- Vectorize(power)
plot(power, 1, 10)
# 1. Power
# let's define variables
n <- 30
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - qf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 1, 10)
# 1. Power
# let's define variables
n <- 30
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - qf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.1, 1)
power(0.1)
power(0)
power(10)
p = qf(0.95, df1=1, df2 = 29)
p
p = qf(0.05, df1=1, df2 = 29)
p
p = qf(0.95, df1=1, df2 = 29)
qf(p, df1=1, df2=29)
pf(p, df1=1, df2=29)
pf(p, df1=1, df2=29, ncp=# 1. Power
# let's define variables
n <- 30
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.1, 1))
# 1. Power
# let's define variables
n <- 30
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.1, 1)
# 1. Power
# let's define variables
n <- 30
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.1, 10)
# 1. Power
# let's define variables
n <- 30
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.1, 1)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.1, 1)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.1, 100)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.1, 0.001)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.1, 0.0001)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.1, 0.00001)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.1, 0.0000001)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.1, 0.0001)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.001, 0.0001)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.001, 0.1)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.0001, 0.01)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.0001, 0.1)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.0001, 1)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.0001, 0.1)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.0001, 0.05)
# 1. Power
# let's define variables
n <- 30380
alpha <- .05
# let's define our function
power <- function(delta){
p <- qf(1-alpha, df1=1, df2=n-1)
power <- 1 - pf(p, df1=1, df2=n-1, ncp=n * delta^2)
return(power)
}
power <- Vectorize(power)
plot(power, 0.0001, 0.03)
power2 <- function(delta){
p <- power(delta)
return(p^2)
}
plot(power2, 0.001, 0.1)
plot(power2, 0.0001, 0.03)
n <- 30
plot(power2, 0.0001, 1)
plot(power2, 0.0001, 1)
pwd
data <- read.table("EncData.txt")
?inverstr
?investr
library(investr)
install.packages("investr", dep = TRUE)
library(investr)
# load library
library(alr4)
# plot
data(wm1)
invest(CSpd.lm, y0 = 10, level = 0.99)
model = lm(wm1$CSpd ~ wm1$RSpd)
invest(model, y0 = 10, levl = 0.99)
data(Heights)
n <- dim(Heights)[1]
m <- trunc(2/3*n)
indices <- sample(n)
construction <- Heights[indices[1:m],]
validation <- Heights[indices[m:n], ]
model <- lm(mheight ~ dheight, data=construction)
predictions <- setNames(data.frame(validation$dheight, c(predict(model, validation))), c("mheight", "dheight"))
ggplot(validation, aes(x=dheight, y=mheight)) + geom_point(data=validation, colour="red") + geom_point(data=predictions, colour="blue")
avg_res <- mean((validation$mheight - predictions$mheight)**2)
sqrt(avg_res)
SXX <- sum((construction$dheight - mean(construction$dheight))**2)
sigma <- sqrt(sum((construction$mheight - predict(model, construction))**2) / (m-2))
sepredsquare <- sigma**2 * (1+ 1/m + (construction$dheight - predict(model, construction))**2 / SXX)
msepredsquare <- mean(sepredsquare)
sqrt(msepredsquare)
avg_res <- mean((construction$mheight - predict(model, construction))**2)
summary(model)
ggplot(validation, aes(x=dheight, y=mheight)) + geom_point(data=validation, colour="red") + geom_point(data=predictions, colour="blue")
require(ggplot2)
ggplot(validation, aes(x=dheight, y=mheight)) + geom_point(data=validation, colour="red") + geom_point(data=predictions, colour="blue")
data(Heights)
n <- dim(Heights)[1]
m <- trunc(2/3*n)
indices <- sample(n)
construction <- Heights[indices[1:m],]
validation <- Heights[indices[m:n], ]
model <- lm(mheight ~ dheight, data=construction)
predictions <- setNames(data.frame(validation$dheight, c(predict(model, validation))), c("dheight", "mheight"))
ggplot(validation, aes(x=dheight, y=mheight)) + geom_point(data=validation, colour="red") + geom_point(data=predictions, colour="blue")
avg_res <- mean((validation$mheight - predictions$mheight)**2)
avg_res
sqrt(avg_res)
SXX <- sum((construction$dheight - mean(construction$dheight))**2)
sigma <- sqrt(sum((construction$mheight - predict(model, construction))**2) / (m-2))
sepredsquare <- sigma**2 * (1+ 1/m + (construction$dheight - predict(model, construction))**2 / SXX)
msepredsquare <- mean(sepredsquare)
sqrt(msepredsquare)
summary(model)
avg_res <- mean((construction$dheight - predict(model, construction))**2)
ab
avg_res
sqrt(avg_res)
data(Heights)
n <- dim(Heights)[1]
m <- trunc(2/3*n)
indices <- sample(n)
construction <- Heights[indices[1:m],]
validation <- Heights[indices[m:n], ]
model <- lm(mheight ~ dheight, data=construction)
predictions <- setNames(data.frame(validation$dheight, c(predict(model, validation))), c("dheight", "mheight"))
ggplot(validation, aes(x=dheight, y=mheight)) + geom_point(data=validation, colour="red") + geom_point(data=predictions, colour="blue")
avg_res <- mean((validation$mheight - predictions$mheight)**2)
avg_res
sqrt(avg_res)
SXX <- sum((construction$dheight - mean(construction$dheight))**2)
sigma <- sqrt(sum((construction$mheight - predict(model, construction))**2) / (m-2))
sepredsquare <- sigma**2 * (1+ 1/m + (construction$dheight - predict(model, construction))**2 / SXX)
msepredsquare <- mean(sepredsquare)
sqrt(msepredsquare)
summary(model)
library(investr)
invest(lm(wm1$CSpd ~ wm1$RSpd), 10, levels=0.99)
invest(lm(wm1$CSpd ~ wm1$RSpd), 10, levels=0.99, x0.name=RSpd)
invest(lm(wm1$CSpd ~ wm1$RSpd), 10, levels=0.99, x0.name="RSpd")
invest(lm(wm1$CSpd ~ wm1$RSpd), 10, level=0.99)
invest(lm(wm1$CSpd ~ wm1$RSpd), 10, level=0.99, x0.name="RSpd")
lm(wm1$CSpd ~ wm1$RSpd)
invest(lm(wm1$CSpd ~ wm1$RSpd))
?invest
invest(lm(wm1$CSpd ~ wm1$RSpd))
model = lm(wm1$CSpd ~ wm1$RSpd)
invest(model)
invest(model)
invest(model.lm)
model.matrix.lm()
model.matrix.lm
CSpd.lm
CSpd.lm = lm(wm1$CSpd ~ wm1$RSpd)
invest(CSpd.lm, y0 = 10, level = 0.99)
invest(CSpd.lm, y0 = 10, level = 0.99, x0.name="RSpd")
library(alr4)
# plot
data(wm1)
library(investr)
callibrate(lm(wm1$CSpd ~ wm1$RSpd), 10, levels=0.99)
calibrate(
library(investr)
callibrate(lm(wm1$CSpd ~ wm1$RSpd), 10, levels=0.99))
calibrate(lm(wm1$CSpd ~ wm1$RSpd), 10, levels=0.99)
model = lm(CSpd ~ RSpd, data=wm1)
calibrate(model, 10, level=0.99)
$ \phi $
$$ \phi $$
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/Stanford/Courses/PHY (Computer Vision for Particle Physics)/Code/src/
library(ggplot2)
library(MASS)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/Stanford/Courses/PHY (Computer Vision for Particle Physics)/Code/src/")
library(ggplot2)
library(MASS)
features <- read.csv("export.txt", header=TRUE)
features$nparts <- factor(features$nparts)
plot(features)
features <- read.csv("export.txt", header=TRUE)
features$nparts <- factor(features$nparts)
plot(features)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/Stanford/Courses/PHY (Computer Vision for Particle Physics)/Code/src/")
library(ggplot2)
library(MASS)
features <- read.csv("export.txt", header=TRUE)
features$nparts <- factor(features$nparts)
plot(features)
features <- read.csv("export.txt", header=TRUE)
features$nparts <- factor(features$nparts)
plot(features)
features <- read.csv("export.txt", header=TRUE)
features$nparts <- factor(features$nparts)
plot(features)
features <- read.csv("export.txt", header=TRUE)
features$nparts <- factor(features$nparts)
plot(features)
